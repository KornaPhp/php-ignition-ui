import {ErrorOccurrence} from "../../types";

const errorOccurrence: ErrorOccurrence = {
    "frames": [
        {
            "file": "/Users/alex/Projects/flare/ignition-test/app/Http/Controllers/TestController.php",
            "line_number": 17,
            "method": "index",
            "class": "App\\Http\\Controllers\\TestController",
            "code_snippet": {
                "2": "",
                "3": "namespace App\\Http\\Controllers;",
                "4": "",
                "5": "use App\\Models\\User;",
                "6": "use Error;",
                "7": "use Exception;",
                "8": "use Spatie\\FlareClient\\Enums\\MessageLevels;",
                "9": "use Spatie\\LaravelIgnition\\Facades\\Flare;",
                "10": "",
                "11": "class TestController",
                "12": "{",
                "13": "    public function index()",
                "14": "    {",
                "15": "        dump('somethign');",
                "16": "",
                "17": "        throw new Error('exception');",
                "18": "",
                "19": "        return 'Hello World';",
                "20": "    }",
                "21": "",
                "22": "    public function blade()",
                "23": "    {",
                "24": "        $user = new User();",
                "25": "        $request = request();",
                "26": "        $cookies = $request->cookie();",
                "27": "",
                "28": "        return view('welcome', compact('user', 'request', 'cookies'));",
                "29": "    }",
                "30": "",
                "31": "    public function livewire()"
            },
            "arguments": [],
            "application_frame": true,
            "relative_file": "app/Http/Controllers/TestController.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php",
            "line_number": 46,
            "method": "dispatch",
            "class": "Illuminate\\Routing\\ControllerDispatcher",
            "code_snippet": {
                "31": "     * Dispatch a request to a given controller and method.",
                "32": "     *",
                "33": "     * @param  \\Illuminate\\Routing\\Route  $route",
                "34": "     * @param  mixed  $controller",
                "35": "     * @param  string  $method",
                "36": "     * @return mixed",
                "37": "     */",
                "38": "    public function dispatch(Route $route, $controller, $method)",
                "39": "    {",
                "40": "        $parameters = $this->resolveParameters($route, $controller, $method);",
                "41": "",
                "42": "        if (method_exists($controller, 'callAction')) {",
                "43": "            return $controller->callAction($method, $parameters);",
                "44": "        }",
                "45": "",
                "46": "        return $controller->{$method}(...array_values($parameters));",
                "47": "    }",
                "48": "",
                "49": "    /**",
                "50": "     * Resolve the parameters for the controller.",
                "51": "     *",
                "52": "     * @param  \\Illuminate\\Routing\\Route  $route",
                "53": "     * @param  mixed  $controller",
                "54": "     * @param  string  $method",
                "55": "     * @return array",
                "56": "     */",
                "57": "    protected function resolveParameters(Route $route, $controller, $method)",
                "58": "    {",
                "59": "        return $this->resolveClassMethodDependencies(",
                "60": "            $route->parametersWithoutNulls(), $controller, $method"
            },
            "arguments": [],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Routing/Route.php",
            "line_number": 259,
            "method": "runController",
            "class": "Illuminate\\Routing\\Route",
            "code_snippet": {
                "244": "     */",
                "245": "    protected function isSerializedClosure()",
                "246": "    {",
                "247": "        return RouteAction::containsSerializedClosure($this->action);",
                "248": "    }",
                "249": "",
                "250": "    /**",
                "251": "     * Run the route action and return the response.",
                "252": "     *",
                "253": "     * @return mixed",
                "254": "     *",
                "255": "     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException",
                "256": "     */",
                "257": "    protected function runController()",
                "258": "    {",
                "259": "        return $this->controllerDispatcher()->dispatch(",
                "260": "            $this, $this->getController(), $this->getControllerMethod()",
                "261": "        );",
                "262": "    }",
                "263": "",
                "264": "    /**",
                "265": "     * Get the controller instance for the route.",
                "266": "     *",
                "267": "     * @return mixed",
                "268": "     */",
                "269": "    public function getController()",
                "270": "    {",
                "271": "        if (! $this->controller) {",
                "272": "            $class = $this->getControllerClass();",
                "273": ""
            },
            "arguments": [
                {
                    "name": "route",
                    "value": "object",
                    "original_type": "Illuminate\\Routing\\Route",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "controller",
                    "value": "object",
                    "original_type": "App\\Http\\Controllers\\TestController",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "method",
                    "value": "index",
                    "original_type": "string",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Routing/Route.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Routing/Route.php",
            "line_number": 205,
            "method": "run",
            "class": "Illuminate\\Routing\\Route",
            "code_snippet": {
                "190": "    {",
                "191": "        return RouteAction::parse($this->uri, $action);",
                "192": "    }",
                "193": "",
                "194": "    /**",
                "195": "     * Run the route action and return the response.",
                "196": "     *",
                "197": "     * @return mixed",
                "198": "     */",
                "199": "    public function run()",
                "200": "    {",
                "201": "        $this->container = $this->container ?: new Container;",
                "202": "",
                "203": "        try {",
                "204": "            if ($this->isControllerAction()) {",
                "205": "                return $this->runController();",
                "206": "            }",
                "207": "",
                "208": "            return $this->runCallable();",
                "209": "        } catch (HttpResponseException $e) {",
                "210": "            return $e->getResponse();",
                "211": "        }",
                "212": "    }",
                "213": "",
                "214": "    /**",
                "215": "     * Checks whether the route's action is a controller.",
                "216": "     *",
                "217": "     * @return bool",
                "218": "     */",
                "219": "    protected function isControllerAction()"
            },
            "arguments": [],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Routing/Route.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Routing/Router.php",
            "line_number": 799,
            "method": "Illuminate\\Routing\\{closure}",
            "class": "Illuminate\\Routing\\Router",
            "code_snippet": {
                "784": "     * @param  \\Illuminate\\Routing\\Route  $route",
                "785": "     * @param  \\Illuminate\\Http\\Request  $request",
                "786": "     * @return mixed",
                "787": "     */",
                "788": "    protected function runRouteWithinStack(Route $route, Request $request)",
                "789": "    {",
                "790": "        $shouldSkipMiddleware = $this->container->bound('middleware.disable') &&",
                "791": "                                $this->container->make('middleware.disable') === true;",
                "792": "",
                "793": "        $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route);",
                "794": "",
                "795": "        return (new Pipeline($this->container))",
                "796": "                        ->send($request)",
                "797": "                        ->through($middleware)",
                "798": "                        ->then(fn ($request) => $this->prepareResponse(",
                "799": "                            $request, $route->run()",
                "800": "                        ));",
                "801": "    }",
                "802": "",
                "803": "    /**",
                "804": "     * Gather the middleware for the given route with resolved class names.",
                "805": "     *",
                "806": "     * @param  \\Illuminate\\Routing\\Route  $route",
                "807": "     * @return array",
                "808": "     */",
                "809": "    public function gatherRouteMiddleware(Route $route)",
                "810": "    {",
                "811": "        return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware());",
                "812": "    }",
                "813": ""
            },
            "arguments": [],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Routing/Router.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 141,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "126": "        return $this->then(function ($passable) {",
                "127": "            return $passable;",
                "128": "        });",
                "129": "    }",
                "130": "",
                "131": "    /**",
                "132": "     * Get the final piece of the Closure onion.",
                "133": "     *",
                "134": "     * @param  \\Closure  $destination",
                "135": "     * @return \\Closure",
                "136": "     */",
                "137": "    protected function prepareDestination(Closure $destination)",
                "138": "    {",
                "139": "        return function ($passable) use ($destination) {",
                "140": "            try {",
                "141": "                return $destination($passable);",
                "142": "            } catch (Throwable $e) {",
                "143": "                return $this->handleException($passable, $e);",
                "144": "            }",
                "145": "        };",
                "146": "    }",
                "147": "",
                "148": "    /**",
                "149": "     * Get a Closure that represents a slice of the application onion.",
                "150": "     *",
                "151": "     * @return \\Closure",
                "152": "     */",
                "153": "    protected function carry()",
                "154": "    {",
                "155": "        return function ($stack, $pipe) {"
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Routing/Middleware/SubstituteBindings.php",
            "line_number": 50,
            "method": "handle",
            "class": "Illuminate\\Routing\\Middleware\\SubstituteBindings",
            "code_snippet": {
                "24": "    public function __construct(Registrar $router)",
                "25": "    {",
                "26": "        $this->router = $router;",
                "27": "    }",
                "28": "",
                "29": "    /**",
                "30": "     * Handle an incoming request.",
                "31": "     *",
                "32": "     * @param  \\Illuminate\\Http\\Request  $request",
                "33": "     * @param  \\Closure  $next",
                "34": "     * @return mixed",
                "35": "     */",
                "36": "    public function handle($request, Closure $next)",
                "37": "    {",
                "38": "        try {",
                "39": "            $this->router->substituteBindings($route = $request->route());",
                "40": "",
                "41": "            $this->router->substituteImplicitBindings($route);",
                "42": "        } catch (ModelNotFoundException $exception) {",
                "43": "            if ($route->getMissing()) {",
                "44": "                return $route->getMissing()($request, $exception);",
                "45": "            }",
                "46": "",
                "47": "            throw $exception;",
                "48": "        }",
                "49": "",
                "50": "        return $next($request);",
                "51": "    }",
                "52": "}",
                "53": ""
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Routing/Middleware/SubstituteBindings.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:139-145",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Routing/Middleware/ThrottleRequests.php",
            "line_number": 159,
            "method": "handleRequest",
            "class": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
            "code_snippet": {
                "144": "     * @param  array  $limits",
                "145": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
                "146": "     *",
                "147": "     * @throws \\Illuminate\\Http\\Exceptions\\ThrottleRequestsException",
                "148": "     */",
                "149": "    protected function handleRequest($request, Closure $next, array $limits)",
                "150": "    {",
                "151": "        foreach ($limits as $limit) {",
                "152": "            if ($this->limiter->tooManyAttempts($limit->key, $limit->maxAttempts)) {",
                "153": "                throw $this->buildException($request, $limit->key, $limit->maxAttempts, $limit->responseCallback);",
                "154": "            }",
                "155": "",
                "156": "            $this->limiter->hit($limit->key, $limit->decayMinutes * 60);",
                "157": "        }",
                "158": "",
                "159": "        $response = $next($request);",
                "160": "",
                "161": "        foreach ($limits as $limit) {",
                "162": "            $response = $this->addHeaders(",
                "163": "                $response,",
                "164": "                $limit->maxAttempts,",
                "165": "                $this->calculateRemainingAttempts($limit->key, $limit->maxAttempts)",
                "166": "            );",
                "167": "        }",
                "168": "",
                "169": "        return $response;",
                "170": "    }",
                "171": "",
                "172": "    /**",
                "173": "     * Resolve the number of attempts if the user is authenticated or not."
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Routing/Middleware/ThrottleRequests.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Routing/Middleware/ThrottleRequests.php",
            "line_number": 90,
            "method": "handle",
            "class": "Illuminate\\Routing\\Middleware\\ThrottleRequests",
            "code_snippet": {
                "75": "     * @param  int|string  $maxAttempts",
                "76": "     * @param  float|int  $decayMinutes",
                "77": "     * @param  string  $prefix",
                "78": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
                "79": "     *",
                "80": "     * @throws \\Illuminate\\Http\\Exceptions\\ThrottleRequestsException",
                "81": "     */",
                "82": "    public function handle($request, Closure $next, $maxAttempts = 60, $decayMinutes = 1, $prefix = '')",
                "83": "    {",
                "84": "        if (is_string($maxAttempts)",
                "85": "            && func_num_args() === 3",
                "86": "            && ! is_null($limiter = $this->limiter->limiter($maxAttempts))) {",
                "87": "            return $this->handleRequestUsingNamedLimiter($request, $next, $maxAttempts, $limiter);",
                "88": "        }",
                "89": "",
                "90": "        return $this->handleRequest(",
                "91": "            $request,",
                "92": "            $next,",
                "93": "            [",
                "94": "                (object) [",
                "95": "                    'key' => $prefix.$this->resolveRequestSignature($request),",
                "96": "                    'maxAttempts' => $this->resolveMaxAttempts($request, $maxAttempts),",
                "97": "                    'decayMinutes' => $decayMinutes,",
                "98": "                    'responseCallback' => null,",
                "99": "                ],",
                "100": "            ]",
                "101": "        );",
                "102": "    }",
                "103": "",
                "104": "    /**"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "limits",
                    "value": [
                        "object (stdClass)"
                    ],
                    "original_type": "array",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Routing/Middleware/ThrottleRequests.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "maxAttempts",
                    "value": 60,
                    "original_type": "int",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "decayMinutes",
                    "value": 1,
                    "original_type": "int",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "prefix",
                    "value": "",
                    "original_type": "string",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php",
            "line_number": 78,
            "method": "handle",
            "class": "Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken",
            "code_snippet": {
                "63": "     *",
                "64": "     * @param  \\Illuminate\\Http\\Request  $request",
                "65": "     * @param  \\Closure  $next",
                "66": "     * @return mixed",
                "67": "     *",
                "68": "     * @throws \\Illuminate\\Session\\TokenMismatchException",
                "69": "     */",
                "70": "    public function handle($request, Closure $next)",
                "71": "    {",
                "72": "        if (",
                "73": "            $this->isReading($request) ||",
                "74": "            $this->runningUnitTests() ||",
                "75": "            $this->inExceptArray($request) ||",
                "76": "            $this->tokensMatch($request)",
                "77": "        ) {",
                "78": "            return tap($next($request), function ($response) use ($request) {",
                "79": "                if ($this->shouldAddXsrfTokenCookie()) {",
                "80": "                    $this->addCookieToResponse($request, $response);",
                "81": "                }",
                "82": "            });",
                "83": "        }",
                "84": "",
                "85": "        throw new TokenMismatchException('CSRF token mismatch.');",
                "86": "    }",
                "87": "",
                "88": "    /**",
                "89": "     * Determine if the HTTP request uses a ‘read’ verb.",
                "90": "     *",
                "91": "     * @param  \\Illuminate\\Http\\Request  $request",
                "92": "     * @return bool"
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/View/Middleware/ShareErrorsFromSession.php",
            "line_number": 49,
            "method": "handle",
            "class": "Illuminate\\View\\Middleware\\ShareErrorsFromSession",
            "code_snippet": {
                "23": "     */",
                "24": "    public function __construct(ViewFactory $view)",
                "25": "    {",
                "26": "        $this->view = $view;",
                "27": "    }",
                "28": "",
                "29": "    /**",
                "30": "     * Handle an incoming request.",
                "31": "     *",
                "32": "     * @param  \\Illuminate\\Http\\Request  $request",
                "33": "     * @param  \\Closure  $next",
                "34": "     * @return mixed",
                "35": "     */",
                "36": "    public function handle($request, Closure $next)",
                "37": "    {",
                "38": "        // If the current session has an \"errors\" variable bound to it, we will share",
                "39": "        // its value with all view instances so the views can easily access errors",
                "40": "        // without having to bind. An empty bag is set when there aren't errors.",
                "41": "        $this->view->share(",
                "42": "            'errors', $request->session()->get('errors') ?: new ViewErrorBag",
                "43": "        );",
                "44": "",
                "45": "        // Putting the errors in the view for every view allows the developer to just",
                "46": "        // assume that some errors are always available, which is convenient since",
                "47": "        // they don't have to continually run checks for the presence of errors.",
                "48": "",
                "49": "        return $next($request);",
                "50": "    }",
                "51": "}",
                "52": ""
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/View/Middleware/ShareErrorsFromSession.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Session/Middleware/StartSession.php",
            "line_number": 121,
            "method": "handleStatefulRequest",
            "class": "Illuminate\\Session\\Middleware\\StartSession",
            "code_snippet": {
                "106": "     * @param  \\Illuminate\\Contracts\\Session\\Session  $session",
                "107": "     * @param  \\Closure  $next",
                "108": "     * @return mixed",
                "109": "     */",
                "110": "    protected function handleStatefulRequest(Request $request, $session, Closure $next)",
                "111": "    {",
                "112": "        // If a session driver has been configured, we will need to start the session here",
                "113": "        // so that the data is ready for an application. Note that the Laravel sessions",
                "114": "        // do not make use of PHP \"native\" sessions in any way since they are crappy.",
                "115": "        $request->setLaravelSession(",
                "116": "            $this->startSession($request, $session)",
                "117": "        );",
                "118": "",
                "119": "        $this->collectGarbage($session);",
                "120": "",
                "121": "        $response = $next($request);",
                "122": "",
                "123": "        $this->storeCurrentUrl($request, $session);",
                "124": "",
                "125": "        $this->addCookieToResponse($response, $session);",
                "126": "",
                "127": "        // Again, if the session has been configured we will need to close out the session",
                "128": "        // so that the attributes may be persisted to some storage medium. We will also",
                "129": "        // add the session identifier cookie to the application response headers now.",
                "130": "        $this->saveSession($request);",
                "131": "",
                "132": "        return $response;",
                "133": "    }",
                "134": "",
                "135": "    /**"
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Session/Middleware/StartSession.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Session/Middleware/StartSession.php",
            "line_number": 64,
            "method": "handle",
            "class": "Illuminate\\Session\\Middleware\\StartSession",
            "code_snippet": {
                "49": "     * @return mixed",
                "50": "     */",
                "51": "    public function handle($request, Closure $next)",
                "52": "    {",
                "53": "        if (! $this->sessionConfigured()) {",
                "54": "            return $next($request);",
                "55": "        }",
                "56": "",
                "57": "        $session = $this->getSession($request);",
                "58": "",
                "59": "        if ($this->manager->shouldBlock() ||",
                "60": "            ($request->route() instanceof Route && $request->route()->locksFor())) {",
                "61": "            return $this->handleRequestWhileBlocking($request, $session, $next);",
                "62": "        }",
                "63": "",
                "64": "        return $this->handleStatefulRequest($request, $session, $next);",
                "65": "    }",
                "66": "",
                "67": "    /**",
                "68": "     * Handle the given request within session state.",
                "69": "     *",
                "70": "     * @param  \\Illuminate\\Http\\Request  $request",
                "71": "     * @param  \\Illuminate\\Contracts\\Session\\Session  $session",
                "72": "     * @param  \\Closure  $next",
                "73": "     * @return mixed",
                "74": "     */",
                "75": "    protected function handleRequestWhileBlocking(Request $request, $session, Closure $next)",
                "76": "    {",
                "77": "        if (! $request->route() instanceof Route) {",
                "78": "            return;"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "session",
                    "value": "object",
                    "original_type": "Illuminate\\Session\\Store",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Session/Middleware/StartSession.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Cookie/Middleware/AddQueuedCookiesToResponse.php",
            "line_number": 37,
            "method": "handle",
            "class": "Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse",
            "code_snippet": {
                "17": "    /**",
                "18": "     * Create a new CookieQueue instance.",
                "19": "     *",
                "20": "     * @param  \\Illuminate\\Contracts\\Cookie\\QueueingFactory  $cookies",
                "21": "     * @return void",
                "22": "     */",
                "23": "    public function __construct(CookieJar $cookies)",
                "24": "    {",
                "25": "        $this->cookies = $cookies;",
                "26": "    }",
                "27": "",
                "28": "    /**",
                "29": "     * Handle an incoming request.",
                "30": "     *",
                "31": "     * @param  \\Illuminate\\Http\\Request  $request",
                "32": "     * @param  \\Closure  $next",
                "33": "     * @return mixed",
                "34": "     */",
                "35": "    public function handle($request, Closure $next)",
                "36": "    {",
                "37": "        $response = $next($request);",
                "38": "",
                "39": "        foreach ($this->cookies->getQueuedCookies() as $cookie) {",
                "40": "            $response->headers->setCookie($cookie);",
                "41": "        }",
                "42": "",
                "43": "        return $response;",
                "44": "    }",
                "45": "}",
                "46": ""
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Cookie/Middleware/AddQueuedCookiesToResponse.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Cookie/Middleware/EncryptCookies.php",
            "line_number": 67,
            "method": "handle",
            "class": "Illuminate\\Cookie\\Middleware\\EncryptCookies",
            "code_snippet": {
                "52": "     */",
                "53": "    public function disableFor($name)",
                "54": "    {",
                "55": "        $this->except = array_merge($this->except, (array) $name);",
                "56": "    }",
                "57": "",
                "58": "    /**",
                "59": "     * Handle an incoming request.",
                "60": "     *",
                "61": "     * @param  \\Illuminate\\Http\\Request  $request",
                "62": "     * @param  \\Closure  $next",
                "63": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
                "64": "     */",
                "65": "    public function handle($request, Closure $next)",
                "66": "    {",
                "67": "        return $this->encrypt($next($this->decrypt($request)));",
                "68": "    }",
                "69": "",
                "70": "    /**",
                "71": "     * Decrypt the cookies on the request.",
                "72": "     *",
                "73": "     * @param  \\Symfony\\Component\\HttpFoundation\\Request  $request",
                "74": "     * @return \\Symfony\\Component\\HttpFoundation\\Request",
                "75": "     */",
                "76": "    protected function decrypt(Request $request)",
                "77": "    {",
                "78": "        foreach ($request->cookies as $key => $cookie) {",
                "79": "            if ($this->isDisabled($key)) {",
                "80": "                continue;",
                "81": "            }"
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Cookie/Middleware/EncryptCookies.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 116,
            "method": "then",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "101": "        return $this;",
                "102": "    }",
                "103": "",
                "104": "    /**",
                "105": "     * Run the pipeline with a final destination callback.",
                "106": "     *",
                "107": "     * @param  \\Closure  $destination",
                "108": "     * @return mixed",
                "109": "     */",
                "110": "    public function then(Closure $destination)",
                "111": "    {",
                "112": "        $pipeline = array_reduce(",
                "113": "            array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination)",
                "114": "        );",
                "115": "",
                "116": "        return $pipeline($this->passable);",
                "117": "    }",
                "118": "",
                "119": "    /**",
                "120": "     * Run the pipeline and return the result.",
                "121": "     *",
                "122": "     * @return mixed",
                "123": "     */",
                "124": "    public function thenReturn()",
                "125": "    {",
                "126": "        return $this->then(function ($passable) {",
                "127": "            return $passable;",
                "128": "        });",
                "129": "    }",
                "130": ""
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Routing/Router.php",
            "line_number": 798,
            "method": "runRouteWithinStack",
            "class": "Illuminate\\Routing\\Router",
            "code_snippet": {
                "783": "     *",
                "784": "     * @param  \\Illuminate\\Routing\\Route  $route",
                "785": "     * @param  \\Illuminate\\Http\\Request  $request",
                "786": "     * @return mixed",
                "787": "     */",
                "788": "    protected function runRouteWithinStack(Route $route, Request $request)",
                "789": "    {",
                "790": "        $shouldSkipMiddleware = $this->container->bound('middleware.disable') &&",
                "791": "                                $this->container->make('middleware.disable') === true;",
                "792": "",
                "793": "        $middleware = $shouldSkipMiddleware ? [] : $this->gatherRouteMiddleware($route);",
                "794": "",
                "795": "        return (new Pipeline($this->container))",
                "796": "                        ->send($request)",
                "797": "                        ->through($middleware)",
                "798": "                        ->then(fn ($request) => $this->prepareResponse(",
                "799": "                            $request, $route->run()",
                "800": "                        ));",
                "801": "    }",
                "802": "",
                "803": "    /**",
                "804": "     * Gather the middleware for the given route with resolved class names.",
                "805": "     *",
                "806": "     * @param  \\Illuminate\\Routing\\Route  $route",
                "807": "     * @return array",
                "808": "     */",
                "809": "    public function gatherRouteMiddleware(Route $route)",
                "810": "    {",
                "811": "        return $this->resolveMiddleware($route->gatherMiddleware(), $route->excludedMiddleware());",
                "812": "    }"
            },
            "arguments": [
                {
                    "name": "destination",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Routing/Router.php:798-800",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Routing/Router.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Routing/Router.php",
            "line_number": 777,
            "method": "runRoute",
            "class": "Illuminate\\Routing\\Router",
            "code_snippet": {
                "762": "",
                "763": "    /**",
                "764": "     * Return the response for the given route.",
                "765": "     *",
                "766": "     * @param  \\Illuminate\\Http\\Request  $request",
                "767": "     * @param  \\Illuminate\\Routing\\Route  $route",
                "768": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
                "769": "     */",
                "770": "    protected function runRoute(Request $request, Route $route)",
                "771": "    {",
                "772": "        $request->setRouteResolver(fn () => $route);",
                "773": "",
                "774": "        $this->events->dispatch(new RouteMatched($route, $request));",
                "775": "",
                "776": "        return $this->prepareResponse($request,",
                "777": "            $this->runRouteWithinStack($route, $request)",
                "778": "        );",
                "779": "    }",
                "780": "",
                "781": "    /**",
                "782": "     * Run the given route within a Stack \"onion\" instance.",
                "783": "     *",
                "784": "     * @param  \\Illuminate\\Routing\\Route  $route",
                "785": "     * @param  \\Illuminate\\Http\\Request  $request",
                "786": "     * @return mixed",
                "787": "     */",
                "788": "    protected function runRouteWithinStack(Route $route, Request $request)",
                "789": "    {",
                "790": "        $shouldSkipMiddleware = $this->container->bound('middleware.disable') &&",
                "791": "                                $this->container->make('middleware.disable') === true;"
            },
            "arguments": [
                {
                    "name": "route",
                    "value": "object",
                    "original_type": "Illuminate\\Routing\\Route",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Routing/Router.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Routing/Router.php",
            "line_number": 741,
            "method": "dispatchToRoute",
            "class": "Illuminate\\Routing\\Router",
            "code_snippet": {
                "726": "    public function dispatch(Request $request)",
                "727": "    {",
                "728": "        $this->currentRequest = $request;",
                "729": "",
                "730": "        return $this->dispatchToRoute($request);",
                "731": "    }",
                "732": "",
                "733": "    /**",
                "734": "     * Dispatch the request to a route and return the response.",
                "735": "     *",
                "736": "     * @param  \\Illuminate\\Http\\Request  $request",
                "737": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
                "738": "     */",
                "739": "    public function dispatchToRoute(Request $request)",
                "740": "    {",
                "741": "        return $this->runRoute($request, $this->findRoute($request));",
                "742": "    }",
                "743": "",
                "744": "    /**",
                "745": "     * Find the route matching a given request.",
                "746": "     *",
                "747": "     * @param  \\Illuminate\\Http\\Request  $request",
                "748": "     * @return \\Illuminate\\Routing\\Route",
                "749": "     */",
                "750": "    protected function findRoute($request)",
                "751": "    {",
                "752": "        $this->events->dispatch(new Routing($request));",
                "753": "",
                "754": "        $this->current = $route = $this->routes->match($request);",
                "755": ""
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "route",
                    "value": "object",
                    "original_type": "Illuminate\\Routing\\Route",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Routing/Router.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Routing/Router.php",
            "line_number": 730,
            "method": "dispatch",
            "class": "Illuminate\\Routing\\Router",
            "code_snippet": {
                "715": "        $route = tap($this->routes->getByName($name))->bind($this->currentRequest);",
                "716": "",
                "717": "        return $this->runRoute($this->currentRequest, $route);",
                "718": "    }",
                "719": "",
                "720": "    /**",
                "721": "     * Dispatch the request to the application.",
                "722": "     *",
                "723": "     * @param  \\Illuminate\\Http\\Request  $request",
                "724": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
                "725": "     */",
                "726": "    public function dispatch(Request $request)",
                "727": "    {",
                "728": "        $this->currentRequest = $request;",
                "729": "",
                "730": "        return $this->dispatchToRoute($request);",
                "731": "    }",
                "732": "",
                "733": "    /**",
                "734": "     * Dispatch the request to a route and return the response.",
                "735": "     *",
                "736": "     * @param  \\Illuminate\\Http\\Request  $request",
                "737": "     * @return \\Symfony\\Component\\HttpFoundation\\Response",
                "738": "     */",
                "739": "    public function dispatchToRoute(Request $request)",
                "740": "    {",
                "741": "        return $this->runRoute($request, $this->findRoute($request));",
                "742": "    }",
                "743": "",
                "744": "    /**"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Routing/Router.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php",
            "line_number": 200,
            "method": "Illuminate\\Foundation\\Http\\{closure}",
            "class": "Illuminate\\Foundation\\Http\\Kernel",
            "code_snippet": {
                "185": "        if (! $this->app->hasBeenBootstrapped()) {",
                "186": "            $this->app->bootstrapWith($this->bootstrappers());",
                "187": "        }",
                "188": "    }",
                "189": "",
                "190": "    /**",
                "191": "     * Get the route dispatcher callback.",
                "192": "     *",
                "193": "     * @return \\Closure",
                "194": "     */",
                "195": "    protected function dispatchToRouter()",
                "196": "    {",
                "197": "        return function ($request) {",
                "198": "            $this->app->instance('request', $request);",
                "199": "",
                "200": "            return $this->router->dispatch($request);",
                "201": "        };",
                "202": "    }",
                "203": "",
                "204": "    /**",
                "205": "     * Call the terminate method on any terminable middleware.",
                "206": "     *",
                "207": "     * @param  \\Illuminate\\Http\\Request  $request",
                "208": "     * @param  \\Illuminate\\Http\\Response  $response",
                "209": "     * @return void",
                "210": "     */",
                "211": "    public function terminate($request, $response)",
                "212": "    {",
                "213": "        $this->terminateMiddleware($request, $response);",
                "214": ""
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 141,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "126": "        return $this->then(function ($passable) {",
                "127": "            return $passable;",
                "128": "        });",
                "129": "    }",
                "130": "",
                "131": "    /**",
                "132": "     * Get the final piece of the Closure onion.",
                "133": "     *",
                "134": "     * @param  \\Closure  $destination",
                "135": "     * @return \\Closure",
                "136": "     */",
                "137": "    protected function prepareDestination(Closure $destination)",
                "138": "    {",
                "139": "        return function ($passable) use ($destination) {",
                "140": "            try {",
                "141": "                return $destination($passable);",
                "142": "            } catch (Throwable $e) {",
                "143": "                return $this->handleException($passable, $e);",
                "144": "            }",
                "145": "        };",
                "146": "    }",
                "147": "",
                "148": "    /**",
                "149": "     * Get a Closure that represents a slice of the application onion.",
                "150": "     *",
                "151": "     * @return \\Closure",
                "152": "     */",
                "153": "    protected function carry()",
                "154": "    {",
                "155": "        return function ($stack, $pipe) {"
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/livewire/livewire/src/DisableBrowserCache.php",
            "line_number": 19,
            "method": "handle",
            "class": "Livewire\\DisableBrowserCache",
            "code_snippet": {
                "3": "namespace Livewire;",
                "4": "",
                "5": "use Closure;",
                "6": "use Symfony\\Component\\HttpFoundation\\Response;",
                "7": "",
                "8": "class DisableBrowserCache",
                "9": "{",
                "10": "    /**",
                "11": "     * Handle an incoming request.",
                "12": "     *",
                "13": "     * @param  \\Illuminate\\Http\\Request  $request",
                "14": "     * @param  \\Closure  $next",
                "15": "     * @return mixed",
                "16": "     */",
                "17": "    public function handle($request, Closure $next)",
                "18": "    {",
                "19": "        $response = $next($request);",
                "20": "",
                "21": "        if ($response instanceof Response && Livewire::shouldDisableBackButtonCache()){",
                "22": "            $response->headers->add([",
                "23": "                \"Pragma\" => \"no-cache\",",
                "24": "                \"Expires\" => \"Fri, 01 Jan 1990 00:00:00 GMT\",",
                "25": "                \"Cache-Control\" => \"no-cache, must-revalidate, no-store, max-age=0, private\",",
                "26": "            ]);",
                "27": "        }",
                "28": "",
                "29": "        return $response;",
                "30": "    }",
                "31": "}",
                "32": ""
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/livewire/livewire/src/DisableBrowserCache.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:139-145",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/vapor-core/src/Http/Middleware/ServeStaticAssets.php",
            "line_number": 21,
            "method": "handle",
            "class": "Laravel\\Vapor\\Http\\Middleware\\ServeStaticAssets",
            "code_snippet": {
                "6": "use GuzzleHttp\\Client;",
                "7": "use GuzzleHttp\\Exception\\ClientException;",
                "8": "",
                "9": "class ServeStaticAssets",
                "10": "{",
                "11": "    /**",
                "12": "     * Handle an incoming request.",
                "13": "     *",
                "14": "     * @param  \\Illuminate\\Http\\Request  $request",
                "15": "     * @param  \\Closure  $next",
                "16": "     * @param  string|null  ...$guards",
                "17": "     * @return mixed",
                "18": "     */",
                "19": "    public function handle($request, Closure $next, ...$guards)",
                "20": "    {",
                "21": "        $response = $next($request);",
                "22": "",
                "23": "        if (isset($_ENV['VAPOR_SSM_PATH']) && $response->getStatusCode() === 404) {",
                "24": "            $requestUri = $request->getRequestUri();",
                "25": "",
                "26": "            if (! in_array(ltrim($requestUri, '/'), config('vapor.serve_assets', []))) {",
                "27": "                return $response;",
                "28": "            }",
                "29": "",
                "30": "            $asset = null;",
                "31": "",
                "32": "            try {",
                "33": "                $asset = (new Client)->get(asset($requestUri));",
                "34": "            } catch (ClientException $e) {",
                "35": "                report($e);"
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/vapor-core/src/Http/Middleware/ServeStaticAssets.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "guards",
                    "value": [],
                    "original_type": "array",
                    "passed_by_reference": false,
                    "is_variadic": true,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php",
            "line_number": 21,
            "method": "handle",
            "class": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
            "code_snippet": {
                "6": "use Symfony\\Component\\HttpFoundation\\ParameterBag;",
                "7": "",
                "8": "class TransformsRequest",
                "9": "{",
                "10": "    /**",
                "11": "     * Handle an incoming request.",
                "12": "     *",
                "13": "     * @param  \\Illuminate\\Http\\Request  $request",
                "14": "     * @param  \\Closure  $next",
                "15": "     * @return mixed",
                "16": "     */",
                "17": "    public function handle($request, Closure $next)",
                "18": "    {",
                "19": "        $this->clean($request);",
                "20": "",
                "21": "        return $next($request);",
                "22": "    }",
                "23": "",
                "24": "    /**",
                "25": "     * Clean the request's data.",
                "26": "     *",
                "27": "     * @param  \\Illuminate\\Http\\Request  $request",
                "28": "     * @return void",
                "29": "     */",
                "30": "    protected function clean($request)",
                "31": "    {",
                "32": "        $this->cleanParameterBag($request->query);",
                "33": "",
                "34": "        if ($request->isJson()) {",
                "35": "            $this->cleanParameterBag($request->json());"
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php",
            "line_number": 31,
            "method": "handle",
            "class": "Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull",
            "code_snippet": {
                "16": "    /**",
                "17": "     * Handle an incoming request.",
                "18": "     *",
                "19": "     * @param  \\Illuminate\\Http\\Request  $request",
                "20": "     * @param  \\Closure  $next",
                "21": "     * @return mixed",
                "22": "     */",
                "23": "    public function handle($request, Closure $next)",
                "24": "    {",
                "25": "        foreach (static::$skipCallbacks as $callback) {",
                "26": "            if ($callback($request)) {",
                "27": "                return $next($request);",
                "28": "            }",
                "29": "        }",
                "30": "",
                "31": "        return parent::handle($request, $next);",
                "32": "    }",
                "33": "",
                "34": "    /**",
                "35": "     * Transform the given value.",
                "36": "     *",
                "37": "     * @param  string  $key",
                "38": "     * @param  mixed  $value",
                "39": "     * @return mixed",
                "40": "     */",
                "41": "    protected function transform($key, $value)",
                "42": "    {",
                "43": "        return $value === '' ? null : $value;",
                "44": "    }",
                "45": ""
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php",
            "line_number": 21,
            "method": "handle",
            "class": "Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest",
            "code_snippet": {
                "6": "use Symfony\\Component\\HttpFoundation\\ParameterBag;",
                "7": "",
                "8": "class TransformsRequest",
                "9": "{",
                "10": "    /**",
                "11": "     * Handle an incoming request.",
                "12": "     *",
                "13": "     * @param  \\Illuminate\\Http\\Request  $request",
                "14": "     * @param  \\Closure  $next",
                "15": "     * @return mixed",
                "16": "     */",
                "17": "    public function handle($request, Closure $next)",
                "18": "    {",
                "19": "        $this->clean($request);",
                "20": "",
                "21": "        return $next($request);",
                "22": "    }",
                "23": "",
                "24": "    /**",
                "25": "     * Clean the request's data.",
                "26": "     *",
                "27": "     * @param  \\Illuminate\\Http\\Request  $request",
                "28": "     * @return void",
                "29": "     */",
                "30": "    protected function clean($request)",
                "31": "    {",
                "32": "        $this->cleanParameterBag($request->query);",
                "33": "",
                "34": "        if ($request->isJson()) {",
                "35": "            $this->cleanParameterBag($request->json());"
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php",
            "line_number": 40,
            "method": "handle",
            "class": "Illuminate\\Foundation\\Http\\Middleware\\TrimStrings",
            "code_snippet": {
                "25": "    /**",
                "26": "     * Handle an incoming request.",
                "27": "     *",
                "28": "     * @param  \\Illuminate\\Http\\Request  $request",
                "29": "     * @param  \\Closure  $next",
                "30": "     * @return mixed",
                "31": "     */",
                "32": "    public function handle($request, Closure $next)",
                "33": "    {",
                "34": "        foreach (static::$skipCallbacks as $callback) {",
                "35": "            if ($callback($request)) {",
                "36": "                return $next($request);",
                "37": "            }",
                "38": "        }",
                "39": "",
                "40": "        return parent::handle($request, $next);",
                "41": "    }",
                "42": "",
                "43": "    /**",
                "44": "     * Transform the given value.",
                "45": "     *",
                "46": "     * @param  string  $key",
                "47": "     * @param  mixed  $value",
                "48": "     * @return mixed",
                "49": "     */",
                "50": "    protected function transform($key, $value)",
                "51": "    {",
                "52": "        if (in_array($key, $this->except, true) || ! is_string($value)) {",
                "53": "            return $value;",
                "54": "        }"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ValidatePostSize.php",
            "line_number": 27,
            "method": "handle",
            "class": "Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize",
            "code_snippet": {
                "12": "     *",
                "13": "     * @param  \\Illuminate\\Http\\Request  $request",
                "14": "     * @param  \\Closure  $next",
                "15": "     * @return mixed",
                "16": "     *",
                "17": "     * @throws \\Illuminate\\Http\\Exceptions\\PostTooLargeException",
                "18": "     */",
                "19": "    public function handle($request, Closure $next)",
                "20": "    {",
                "21": "        $max = $this->getPostMaxSize();",
                "22": "",
                "23": "        if ($max > 0 && $request->server('CONTENT_LENGTH') > $max) {",
                "24": "            throw new PostTooLargeException;",
                "25": "        }",
                "26": "",
                "27": "        return $next($request);",
                "28": "    }",
                "29": "",
                "30": "    /**",
                "31": "     * Determine the server 'post_max_size' as bytes.",
                "32": "     *",
                "33": "     * @return int",
                "34": "     */",
                "35": "    protected function getPostMaxSize()",
                "36": "    {",
                "37": "        if (is_numeric($postMaxSize = ini_get('post_max_size'))) {",
                "38": "            return (int) $postMaxSize;",
                "39": "        }",
                "40": "",
                "41": "        $metric = strtoupper(substr($postMaxSize, -1));"
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ValidatePostSize.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php",
            "line_number": 86,
            "method": "handle",
            "class": "Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance",
            "code_snippet": {
                "71": "                return response(",
                "72": "                    $data['template'],",
                "73": "                    $data['status'] ?? 503,",
                "74": "                    $this->getHeaders($data)",
                "75": "                );",
                "76": "            }",
                "77": "",
                "78": "            throw new HttpException(",
                "79": "                $data['status'] ?? 503,",
                "80": "                'Service Unavailable',",
                "81": "                null,",
                "82": "                $this->getHeaders($data)",
                "83": "            );",
                "84": "        }",
                "85": "",
                "86": "        return $next($request);",
                "87": "    }",
                "88": "",
                "89": "    /**",
                "90": "     * Determine if the incoming request has a maintenance mode bypass cookie.",
                "91": "     *",
                "92": "     * @param  \\Illuminate\\Http\\Request  $request",
                "93": "     * @param  array  $data",
                "94": "     * @return bool",
                "95": "     */",
                "96": "    protected function hasValidBypassCookie($request, array $data)",
                "97": "    {",
                "98": "        return isset($data['secret']) &&",
                "99": "                $request->cookie('laravel_maintenance') &&",
                "100": "                MaintenanceModeBypassCookie::isValid("
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Http/Middleware/HandleCors.php",
            "line_number": 49,
            "method": "handle",
            "class": "Illuminate\\Http\\Middleware\\HandleCors",
            "code_snippet": {
                "34": "    {",
                "35": "        $this->container = $container;",
                "36": "        $this->cors = $cors;",
                "37": "    }",
                "38": "",
                "39": "    /**",
                "40": "     * Handle the incoming request.",
                "41": "     *",
                "42": "     * @param  \\Illuminate\\Http\\Request  $request",
                "43": "     * @param  \\Closure  $next",
                "44": "     * @return \\Illuminate\\Http\\Response",
                "45": "     */",
                "46": "    public function handle($request, Closure $next)",
                "47": "    {",
                "48": "        if (! $this->hasMatchingPath($request)) {",
                "49": "            return $next($request);",
                "50": "        }",
                "51": "",
                "52": "        $this->cors->setOptions($this->container['config']->get('cors', []));",
                "53": "",
                "54": "        if ($this->cors->isPreflightRequest($request)) {",
                "55": "            $response = $this->cors->handlePreflightRequest($request);",
                "56": "",
                "57": "            $this->cors->varyHeader($response, 'Access-Control-Request-Method');",
                "58": "",
                "59": "            return $response;",
                "60": "        }",
                "61": "",
                "62": "        $response = $next($request);",
                "63": ""
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Http/Middleware/HandleCors.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php",
            "line_number": 39,
            "method": "handle",
            "class": "Illuminate\\Http\\Middleware\\TrustProxies",
            "code_snippet": {
                "24": "    /**",
                "25": "     * Handle an incoming request.",
                "26": "     *",
                "27": "     * @param  \\Illuminate\\Http\\Request  $request",
                "28": "     * @param  \\Closure  $next",
                "29": "     * @return mixed",
                "30": "     *",
                "31": "     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException",
                "32": "     */",
                "33": "    public function handle(Request $request, Closure $next)",
                "34": "    {",
                "35": "        $request::setTrustedProxies([], $this->getTrustedHeaderNames());",
                "36": "",
                "37": "        $this->setTrustedProxyIpAddresses($request);",
                "38": "",
                "39": "        return $next($request);",
                "40": "    }",
                "41": "",
                "42": "    /**",
                "43": "     * Sets the trusted proxies on the request.",
                "44": "     *",
                "45": "     * @param  \\Illuminate\\Http\\Request  $request",
                "46": "     * @return void",
                "47": "     */",
                "48": "    protected function setTrustedProxyIpAddresses(Request $request)",
                "49": "    {",
                "50": "        $trustedIps = $this->proxies() ?: config('trustedproxy.proxies');",
                "51": "",
                "52": "        if ($trustedIps === '*' || $trustedIps === '**') {",
                "53": "            return $this->setTrustedProxyIpAddressesToTheCallingIp($request);"
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 180,
            "method": "Illuminate\\Pipeline\\{closure}",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "165": "",
                "166": "                        // If the pipe is a string we will parse the string and resolve the class out",
                "167": "                        // of the dependency injection container. We can then build a callable and",
                "168": "                        // execute the pipe function giving in the parameters that are required.",
                "169": "                        $pipe = $this->getContainer()->make($name);",
                "170": "",
                "171": "                        $parameters = array_merge([$passable, $stack], $parameters);",
                "172": "                    } else {",
                "173": "                        // If the pipe is already an object we'll just make a callable and pass it to",
                "174": "                        // the pipe as-is. There is no need to do any extra parsing and formatting",
                "175": "                        // since the object we're given was already a fully instantiated object.",
                "176": "                        $parameters = [$passable, $stack];",
                "177": "                    }",
                "178": "",
                "179": "                    $carry = method_exists($pipe, $this->method)",
                "180": "                                    ? $pipe->{$this->method}(...$parameters)",
                "181": "                                    : $pipe(...$parameters);",
                "182": "",
                "183": "                    return $this->handleCarry($carry);",
                "184": "                } catch (Throwable $e) {",
                "185": "                    return $this->handleException($passable, $e);",
                "186": "                }",
                "187": "            };",
                "188": "        };",
                "189": "    }",
                "190": "",
                "191": "    /**",
                "192": "     * Parse full pipe string to get name and parameters.",
                "193": "     *",
                "194": "     * @param  string  $pipe"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                },
                {
                    "name": "next",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php:156-187",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php",
            "line_number": 116,
            "method": "then",
            "class": "Illuminate\\Pipeline\\Pipeline",
            "code_snippet": {
                "101": "        return $this;",
                "102": "    }",
                "103": "",
                "104": "    /**",
                "105": "     * Run the pipeline with a final destination callback.",
                "106": "     *",
                "107": "     * @param  \\Closure  $destination",
                "108": "     * @return mixed",
                "109": "     */",
                "110": "    public function then(Closure $destination)",
                "111": "    {",
                "112": "        $pipeline = array_reduce(",
                "113": "            array_reverse($this->pipes()), $this->carry(), $this->prepareDestination($destination)",
                "114": "        );",
                "115": "",
                "116": "        return $pipeline($this->passable);",
                "117": "    }",
                "118": "",
                "119": "    /**",
                "120": "     * Run the pipeline and return the result.",
                "121": "     *",
                "122": "     * @return mixed",
                "123": "     */",
                "124": "    public function thenReturn()",
                "125": "    {",
                "126": "        return $this->then(function ($passable) {",
                "127": "            return $passable;",
                "128": "        });",
                "129": "    }",
                "130": ""
            },
            "arguments": [
                {
                    "name": "arg0",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php",
            "line_number": 175,
            "method": "sendRequestThroughRouter",
            "class": "Illuminate\\Foundation\\Http\\Kernel",
            "code_snippet": {
                "160": "     *",
                "161": "     * @param  \\Illuminate\\Http\\Request  $request",
                "162": "     * @return \\Illuminate\\Http\\Response",
                "163": "     */",
                "164": "    protected function sendRequestThroughRouter($request)",
                "165": "    {",
                "166": "        $this->app->instance('request', $request);",
                "167": "",
                "168": "        Facade::clearResolvedInstance('request');",
                "169": "",
                "170": "        $this->bootstrap();",
                "171": "",
                "172": "        return (new Pipeline($this->app))",
                "173": "                    ->send($request)",
                "174": "                    ->through($this->app->shouldSkipMiddleware() ? [] : $this->middleware)",
                "175": "                    ->then($this->dispatchToRouter());",
                "176": "    }",
                "177": "",
                "178": "    /**",
                "179": "     * Bootstrap the application for HTTP requests.",
                "180": "     *",
                "181": "     * @return void",
                "182": "     */",
                "183": "    public function bootstrap()",
                "184": "    {",
                "185": "        if (! $this->app->hasBeenBootstrapped()) {",
                "186": "            $this->app->bootstrapWith($this->bootstrappers());",
                "187": "        }",
                "188": "    }",
                "189": ""
            },
            "arguments": [
                {
                    "name": "destination",
                    "value": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php:197-201",
                    "original_type": "Closure",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php",
            "line_number": 144,
            "method": "handle",
            "class": "Illuminate\\Foundation\\Http\\Kernel",
            "code_snippet": {
                "129": "    }",
                "130": "",
                "131": "    /**",
                "132": "     * Handle an incoming HTTP request.",
                "133": "     *",
                "134": "     * @param  \\Illuminate\\Http\\Request  $request",
                "135": "     * @return \\Illuminate\\Http\\Response",
                "136": "     */",
                "137": "    public function handle($request)",
                "138": "    {",
                "139": "        $this->requestStartedAt = Carbon::now();",
                "140": "",
                "141": "        try {",
                "142": "            $request->enableHttpMethodParameterOverride();",
                "143": "",
                "144": "            $response = $this->sendRequestThroughRouter($request);",
                "145": "        } catch (Throwable $e) {",
                "146": "            $this->reportException($e);",
                "147": "",
                "148": "            $response = $this->renderException($request, $e);",
                "149": "        }",
                "150": "",
                "151": "        $this->app['events']->dispatch(",
                "152": "            new RequestHandled($request, $response)",
                "153": "        );",
                "154": "",
                "155": "        return $response;",
                "156": "    }",
                "157": "",
                "158": "    /**"
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": false,
            "relative_file": "vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php"
        },
        {
            "file": "/Users/alex/Projects/flare/ignition-test/public/index.php",
            "line_number": 51,
            "method": "require",
            "class": "",
            "code_snippet": {
                "27": "|",
                "28": "| Composer provides a convenient, automatically generated class loader for",
                "29": "| this application. We just need to utilize it! We'll simply require it",
                "30": "| into the script here so we don't need to manually load our classes.",
                "31": "|",
                "32": "*/",
                "33": "",
                "34": "require __DIR__.'/../vendor/autoload.php';",
                "35": "",
                "36": "/*",
                "37": "|--------------------------------------------------------------------------",
                "38": "| Run The Application",
                "39": "|--------------------------------------------------------------------------",
                "40": "|",
                "41": "| Once we have the application, we can handle the incoming request using",
                "42": "| the application's HTTP kernel. Then, we will send the response back",
                "43": "| to this client's browser, allowing them to enjoy our application.",
                "44": "|",
                "45": "*/",
                "46": "",
                "47": "$app = require_once __DIR__.'/../bootstrap/app.php';",
                "48": "",
                "49": "$kernel = $app->make(Kernel::class);",
                "50": "",
                "51": "$response = $kernel->handle(",
                "52": "    $request = Request::capture()",
                "53": ")->send();",
                "54": "",
                "55": "$kernel->terminate($request, $response);",
                "56": ""
            },
            "arguments": [
                {
                    "name": "request",
                    "value": "GET http://ignition-test.test/controller",
                    "original_type": "Illuminate\\Http\\Request",
                    "passed_by_reference": false,
                    "is_variadic": false,
                    "truncated": false
                }
            ],
            "application_frame": true,
            "relative_file": "public/index.php"
        },
        {
            "file": "/Applications/Herd.app/Contents/Resources/valet/server.php",
            "line_number": 110,
            "method": "[top]",
            "class": "",
            "code_snippet": {
                "82": "$isPhpFile = pathinfo($uri, PATHINFO_EXTENSION) === 'php';",
                "83": "",
                "84": "if ($uri !== '/' && ! $isPhpFile && $staticFilePath = $valetDriver->isStaticFile($valetSitePath, $siteName, $uri)) {",
                "85": "    return $valetDriver->serveStaticFile($staticFilePath, $valetSitePath, $siteName, $uri);",
                "86": "}",
                "87": "",
                "88": "/**",
                "89": " * Allow for drivers to take pre-loading actions (e.g. setting server variables).",
                "90": " */",
                "91": "$valetDriver->beforeLoading($valetSitePath, $siteName, $uri);",
                "92": "",
                "93": "/**",
                "94": " * Attempt to dispatch to a front controller.",
                "95": " */",
                "96": "$frontControllerPath = $valetDriver->frontControllerPath(",
                "97": "    $valetSitePath, $siteName, $uri",
                "98": ");",
                "99": "",
                "100": "if (! $frontControllerPath) {",
                "101": "    if (isset($valetConfig['directory-listing']) && $valetConfig['directory-listing'] == 'on') {",
                "102": "        Server::showDirectoryListing($valetSitePath, $uri);",
                "103": "    }",
                "104": "",
                "105": "    Server::show404();",
                "106": "}",
                "107": "",
                "108": "chdir(dirname($frontControllerPath));",
                "109": "",
                "110": "require $frontControllerPath;",
                "111": ""
            },
            "arguments": [],
            "application_frame": false,
            "relative_file": "/Applications/Herd.app/Contents/Resources/valet/server.php"
        }
    ],
    "context_items": {
        "request": {
            "url": "http://ignition-test.test/controller",
            "ip": null,
            "method": "GET",
            "useragent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36"
        },
        "request_data": {
            "queryString": [],
            "body": [],
            "files": []
        },
        "queries": [],
        "dumps": [
            {
                "html_dump": "<pre class=sf-dump id=sf-dump-1617202905 data-indent-pad=\"  \">\"<span class=sf-dump-str title=\"9 characters\">somethign</span>\"\n</pre><script>Sfdump(\"sf-dump-1617202905\", {\"maxDepth\":3,\"maxStringLength\":160})</script>\n",
                "file": "/Users/alex/Projects/flare/ignition-test/app/Http/Controllers/TestController.php",
                "line_number": 15,
                "microtime": 1691663236.870596
            }
        ],
        "logs": [],
        "headers": {
            "accept-language": "nl-NL,nl;q=0.9,en-US;q=0.8,en;q=0.7,fr;q=0.6",
            "accept-encoding": "gzip, deflate",
            "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
            "upgrade-insecure-requests": "1",
            "cache-control": "no-cache",
            "pragma": "no-cache",
            "connection": "keep-alive",
            "host": "ignition-test.test"
        },
        "cookies": [],
        "session": {
            "_token": "9XJVmaZPwsuahj1Tc8xeczorCxCenIslhEPOEJik"
        },
        "env": {
            "php_version": "8.2.6",
            "laravel_version": "10.14.0",
            "laravel_locale": "en",
            "laravel_config_cached": false,
            "app_debug": true,
            "app_env": "local"
        },
        "user": null,
        "route": {
            "route": null,
            "routeParameters": [],
            "controllerAction": "App\\Http\\Controllers\\TestController@index",
            "middleware": [
                "web",
                "Illuminate\\Routing\\Middleware\\ThrottleRequests"
            ]
        },
        "git": {
            "hash": "6cb41f20a7b5e090223e9ec5727289a1b49c6329",
            "message": "wip",
            "tag": null,
            "remote": "git@github.com:spatie/ignition-test.git",
            "isDirty": true
        },
        "livewire": null,
        "view": null,
        "exception": null,
        "arguments": null,
        "job": null
    },
    "custom_context_items": [],
    "type": "web",
    "entry_point": "http://ignition-test.test/controller",
    "exception_class": "Error",
    "exception_message": "exception",
    "application_path": "/Users/alex/Projects/flare/ignition-test",
    "application_version": null,
    "language_version": "8.2.6",
    "framework_version": "10.14.0",
    "notifier_client_name": "Flare",
    "stage": "local",
    "first_frame_class": "App\\Http\\Controllers\\TestController",
    "first_frame_method": "index",
    "glows": [],
    "solutions": [],
    "documentation_links": []
};

export default errorOccurrence;
